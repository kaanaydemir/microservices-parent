version: "3.7"
services:
  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-data:/data/db
  service-discovery:
    image: service-discovery
    build:
      context: ./service-discovery
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      - spring.config.import=optional:configserver:http://config-server:8888
      - spring.application.name=service-discovery
      - spring.application.version=1.0.0
      - spring.application.description=Service Discovery
      - spring.application.port=8761
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka/
  api-gateway:
    image: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8765:8765"
    environment:
      - spring.config.import=optional:configserver:http://config-server:8888
      - spring.application.name=api-gateway
      - spring.application.version=1.0.0
      - spring.application.description=API Gateway
      - spring.application.port=8765
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka/
  inventory-service:
    image: inventory-service
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - spring.application.name=inventory-service
      - spring.application.version=1.0.0
      - spring.application.description=Inventory Service
      - spring.application.port=8082
      - spring.config.import=optional:configserver:http://config-server:8888
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka/
    depends_on:
      - config-server
  notification-service:
    image: kaanaydemir0/mmv2-notification-service:0.0.1-SNAPSHOT
    pull_policy: always
    ports:
      - "8086:8086"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - spring.kafka.bootstrap-servers=broker:29092
      - spring.kafka.consumer.bootstrap-servers=broker:29092
  order-service:
    image: kaanaydemir0/mmv2-order-service:0.0.3-SNAPSHOT
    ports:
      - "8089:8089"
    environment:
      - spring.kafka.bootstrap-servers=broker:29092
      - spring.kafka.producer.bootstrap-servers=broker:29092
      - spring.kafka.consumer.bootstrap-servers=broker:29092
      - spring.config.import=optional:configserver:http://config-server:8888
      - spring.application.name=order-service
      - spring.application.version=1.0.0
      - spring.application.description=Order Service
      - spring.application.port=8089
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka/
  config-server:
    image: config-server
    build:
      context: ./cloud-config-server
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    environment:
      - spring.cloud.config.server.git.uri=https://github.com/kaanaydemir/config-server
      - spring.cloud.config.server.git.clone-on-start=true
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka/
    depends_on:
      - zipkin
      - service-discovery
  product-service:
    image: product-service
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
        - spring.config.import=optional:configserver:http://config-server:8888
        - spring.application.name=product-service
        - spring.application.version=1.0.0
        - spring.application.description=Product Service
        - spring.application.port=8080
        - spring.data.mongodb.uri=mongodb://user:password@mongo:27017/product-service?authSource=admin
        - spring.data.mongodb.password=password
        - spring.data.mongodb.username=user
        - spring.data.mongodb.host=mongo
        - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka/
    depends_on:
      - zipkin
      - service-discovery
      - config-server
      - mongo
    links:
      - mongo
  zookeeper:
    image: confluentinc/cp-zookeeper:6.0.0
    hostname: zookeeper
    container_name: kafka-connect-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  broker:
    image: confluentinc/cp-kafka:6.2.0
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_INTERNAL://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.0
    container_name: schema-registry
    ports:
      - "8081:8081"
    depends_on:
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
  control-center:
    image: confluentinc/cp-enterprise-control-center:6.0.0
    hostname: control-center
    container_name: kafka-connect-control-center
    depends_on:
      - broker
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      PORT: 9021
